<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
	<Type Name="StringView">
		<DisplayString>{start,[(last - start) + 1]s}</DisplayString>
		<Expand>
			<Item Name="[start]">*start</Item>
			<Item Name="[last]">*last</Item>
		</Expand>
	</Type>

	<Type Name="Stmnt">
		<DisplayString
			Condition="nodeID == StmntID::InvalidNode"
			Optional="true">
			{nodeID,en}
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::CommentStmnt"
			Optional="true">
			{nodeID,en}
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::ExpressionStmnt"
			Optional="true">
			{*expressionStmnt.expression}
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::ImportStmnt"
			Optional="true">
			import {*importStmnt.packageName}
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::ImportStmnt &amp;&amp; importStmnt.alias != 0"
			Optional="true">
			as {*importStmnt.alias}
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::PackageStmnt"
			Optional="true">
			package {*package.name}
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::Definition"
			Optional="true">
			{*definition.name}: {*definition.type}
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::Definition &amp;&amp; definition.assignment != 0"
			Optional="true">
			{*definition.op} {*definition.assignment}
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::InlineDefinition"
			Optional="true">
			{*inlineDefinition.type} {*inlineDefinition.op} {*inlineDefinition.assignment}
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::FunctionStmnt"
			Optional="true">
			{*function.returnType} {*function.name}{*function.generics}{*function.decl}
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::FunctionDecl"
			Optional="true">
			({(*functionDecl.parameters).mpEnd - (*functionDecl.parameters).mpBegin}) {functionDecl.body}
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::StateStmnt"
			Optional="true">
			{*state.name}{*state.generics}[{(*state.members).mpEnd - (*state.members).mpBegin}]
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::GenericsDecl"
			Optional="true">
			&lt;[{(*generics.names).mpEnd - (*generics.names).mpBegin}]&gt;
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::GenericsDecl &amp;&amp; generics.whereStmnt != 0"
			Optional="true">
			{*generics.whereStmnt}
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::WhereStmnt"
			Optional="true">
			{*whereStmnt.decl}
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::Method"
			Optional="true">
			{*method.returnType} {*method.stateName}::{*method.name}{*method.generics}{*method.decl}
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::StateOperator"
			Optional="true">
			{*stateOperator.returnType} {*stateOperator.stateName}::operator{*stateOperator.generics}::{*stateOperator.op}{*stateOperator.decl}
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::Destructor"
			Optional="true">
			{*destructor.stateName}::delete {destructor.body}
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::Constructor"
			Optional="true">
			{*constructor.stateName}::{constructor.decl}
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::Conditional"
			Optional="true">
			({*conditional.condition}) {conditional.body}
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::AssignmentStmnt"
			Optional="true">
			{*assignmentStmnt.assignTo} {*assignmentStmnt.op} {*assignmentStmnt.assignment}
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::IfStmnt"
			Optional="true">
			if({*ifStmnt.condition}) else if[{(*ifStmnt.elifs).mpEnd - (*ifStmnt.elifs).mpBegin}] else{ifStmnt.elseCondition}
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::ForStmnt &amp;&amp; forStmnt.isDeclaration"
			Optional="true">
			for({*forStmnt.declaration} {*forStmnt.iterator} {*forStmnt.toIterate}) {forStmnt.body}
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::ForStmnt &amp;&amp; !forStmnt.isDeclaration"
			Optional="true">
			for({*forStmnt.identifier} {*forStmnt.iterator} {*forStmnt.toIterate}) {forStmnt.body}
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::WhileStmnt"
			Optional="true">
			while{*whileStmnt.conditional}
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::SwitchStmnt"
			Optional="true">
			switch({*switchStmnt.switchOn}) cases[{(*switchStmnt.cases).mpEnd - (*switchStmnt.cases).mpBegin}]
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::DeleteStmnt &amp;&amp; !deleteStmnt.arrDelete"
			Optional="true">
			delete {*deleteStmnt.primaryExpr}
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::DeleteStmnt &amp;&amp; deleteStmnt.arrDelete"
			Optional="true">
			delete[] {*deleteStmnt.primaryExpr}
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::DeferStmnt"
			Optional="true">
			defer 
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::DeferStmnt &amp;&amp; deferStmnt.deferIf"
			Optional="true">
			{*deferStmnt.conditional}
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::DeferStmnt &amp;&amp; !deferStmnt.deferIf"
			Optional="true">
			{*deferStmnt.body}
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::ContinueStmnt"
			Optional="true">
			continue
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::BreakStmnt"
			Optional="true">
			break
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::ReturnStmnt"
			Optional="true">
			return
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::ReturnStmnt"
			Optional="true">
			{*returnStmnt.expr}
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::CompileStmnt"
			Optional="true">
			#compile {*compileStmnt.compileExpr}
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::CompileDebugStmnt"
			Optional="true">
			#debug {*compileDebugStmnt.body}
		</DisplayString>
		<DisplayString
			Condition="nodeID == StmntID::Block"
			Optional="true">
			block[{(*block.inner).mpEnd - (*block.inner).mpBegin}]
		</DisplayString>
		<Expand>
			<Item Name="[type]">nodeID,en</Item>
			<Item Name="[start]">*start</Item>
			<Item Name="[end]" Condition="end != 0" Optional="true">*end</Item>
			<Item Name="[scope]" Condition="scope != 0" Optional="true">scope->nodeID,en</Item>
		</Expand>
	</Type>

	<Type Name="Body">
		<DisplayString Condition="body != 0" Optional="true">{*body}</DisplayString>
		<Expand>
			<Item Name="[is statement]">statement</Item>
		</Expand>
	</Type>

	<Type Name="Type">
		<DisplayString
			Condition="typeID == TypeID::InvalidType"
			Optional="true">
			Invalid
		</DisplayString>
		<DisplayString
			Condition="typeID == TypeID::UnknownType"
			Optional="true">
			Implicit
		</DisplayString>
		<DisplayString
			Condition="typeID == TypeID::PrimitiveType"
			Optional="true">
			{primitiveType.type,en}
		</DisplayString>
		<DisplayString
			Condition="typeID == TypeID::NamedType"
			Optional="true">
			{namedType.typeName->val.start,[namedType.typeName->val.count]sb}
		</DisplayString>
		<DisplayString
			Condition="typeID == TypeID::ExplicitType"
			Optional="true">
			{typeID,en}[{(*explicitType.declarations).mpEnd - (*explicitType.declarations).mpBegin}]
		</DisplayString>
		<DisplayString
			Condition="typeID == TypeID::ImplicitType"
			Optional="true">
			{typeID,en}[{(*implicitType.identifiers).mpEnd - (*implicitType.identifiers).mpBegin}]
		</DisplayString>
		<DisplayString
			Condition="typeID == TypeID::PointerType"
			Optional="true">
			*{*pointerType.type}
		</DisplayString>
		<DisplayString
			Condition="typeID == TypeID::ValueType"
			Optional="true">
			~{*valueType.type}
		</DisplayString>
		<DisplayString
			Condition="typeID == TypeID::ArrayType"
			Optional="true">
			[]{*arrayType.type}
		</DisplayString>
		<DisplayString
			Condition="typeID == TypeID::GenericsType"
			Optional="true">
			{*genericsType.generics}{*genericsType.type}
		</DisplayString>
		<DisplayString
			Condition="typeID == TypeID::FunctionType"
			Optional="true">
			::{*functionType.returnType}({(*functionType.paramTypes).mpEnd - (*functionType.paramTypes).mpBegin})
		</DisplayString>
		<DisplayString
			Condition="typeID == TypeID::ImportedType"
			Optional="true">
			{importedType.packageName->val.start,[importedType.packageName->val.count]sb}.{importedType.typeName->val.start,[importedType.typeName->val.count]sb}
		</DisplayString>
		<Expand>
			<Item Name="[type ID]">typeID</Item>
		</Expand>
	</Type>

	<Type Name="Expr">
		<DisplayString
			Condition="typeID == ExprID::InvalidExpr"
			Optional="true">
			Invalid
		</DisplayString>
		<DisplayString
			Condition="typeID == ExprID::LiteralExpr"
			Optional="true">
			{literalExpr.type,en} {*literalExpr.val}
		</DisplayString>
		<DisplayString
			Condition="typeID == ExprID::IdentifierExpr"
			Optional="true">
			{*identifierExpr.identifier}
		</DisplayString>
		<DisplayString
			Condition="typeID == ExprID::PrimitiveExpr"
			Optional="true">
			{*primitiveExpr.primitive}
		</DisplayString>
		<DisplayString
			Condition="typeID == ExprID::SelectorExpr"
			Optional="true">
			{*selectorExpr.on}.{*selectorExpr.select}
		</DisplayString>
		<DisplayString
			Condition="typeID == ExprID::IndexExpr"
			Optional="true">
			{*indexExpr.of}[{*indexExpr.index}]
		</DisplayString>
		<DisplayString
			Condition="typeID == ExprID::FunctionCallExpr"
			Optional="true">
			{*functionCallExpr.function}({(*functionCallExpr.params).mpEnd - (*functionCallExpr.params).mpBegin})
		</DisplayString>
		<DisplayString
			Condition="typeID == ExprID::NewExpr"
			Optional="true">
			new {*newExpr.primaryExpr}
		</DisplayString>
		<DisplayString
			Condition="typeID == ExprID::NewExpr &amp;&amp; newExpr.atExpr != 0"
			Optional="true">
			{*newExpr.atExpr}
		</DisplayString>
		<DisplayString
			Condition="typeID == ExprID::FixedExpr"
			Optional="true">
			fixed {*fixedExpr.atExpr}
		</DisplayString>
		<DisplayString
			Condition="typeID == ExprID::AnonTypeExpr"
			Optional="true">
			Anon[{(*anonTypeExpr.values).mpEnd - (*anonTypeExpr.values).mpBegin}]
		</DisplayString>
		<DisplayString
			Condition="typeID == ExprID::AsExpr"
			Optional="true">
			{*asExpr.of} as {*asExpr.to}
		</DisplayString>
		<DisplayString
			Condition="typeID == ExprID::DereferenceExpr"
			Optional="true">
			{*dereferenceExpr.of}{*dereferenceExpr.op}
		</DisplayString>
		<DisplayString
			Condition="typeID == ExprID::ReferenceExpr"
			Optional="true">
			{*referenceExpr.of}{*referenceExpr.op}
		</DisplayString>
		<DisplayString
			Condition="typeID == ExprID::BinaryExpr"
			Optional="true">
			{*binaryExpr.left} {*binaryExpr.op} {*binaryExpr.right}
		</DisplayString>
		<DisplayString
			Condition="typeID == ExprID::UnaryExpr"
			Optional="true">
			{*unaryExpr.op}{*unaryExpr.expr}
		</DisplayString>
		<DisplayString
			Condition="typeID == ExprID::GroupedExpr"
			Optional="true">
			({*groupedExpr.expr})
		</DisplayString>
		<DisplayString
			Condition="typeID == ExprID::TemplateExpr"
			Optional="true">
			&lt;[{(*templateExpr.templateArgs).mpEnd - (*templateExpr.templateArgs).mpBegin}]&gt;{*templateExpr.expr}
		</DisplayString>
		<DisplayString
			Condition="typeID == ExprID::FunctionTypeExpr"
			Optional="true">
			{*functionTypeExpr.functionType}
		</DisplayString>
		<DisplayString
			Condition="typeID == ExprID::FunctionTypeDeclExpr"
			Optional="true">
			{*functionTypeDeclExpr.returnType} {*functionTypeDeclExpr.functionDecl}
		</DisplayString>
		<DisplayString
			Condition="typeID == ExprID::CompileExpr"
			Optional="true">
			{*compileExpr.returnType} {compileExpr.body}
		</DisplayString>
		<Expand>
			<Item Name="[start]">*start</Item>
			<Item Name="[type]">typeID</Item>
		</Expand>
	</Type>

	<Type Name="Token">
		<DisplayString>{val.start,[val.count]sb}</DisplayString>
		<Expand>
			<Item Name="[position]">pos</Item>
			<Item Name="[type]">type,en</Item>
			<Item Name="[unique type]">uniqueType,en</Item>
		</Expand>
	</Type>

	<Type Name="Position">
		<DisplayString Condition="file != 0" Optional="true">file:{*file,s} line:{line}"</DisplayString>
		<Expand>
			<Item Name="[file]" Condition="file != 0" Optional="true">*file,s</Item>
			<Item Name="[file offset]">fileOffset</Item>
			<Item Name="[line]">line</Item>
			<Item Name="[column offset]">columnOffset</Item>
		</Expand>
	</Type>
</AutoVisualizer>
